{"version":3,"sources":["NotificationBuilder/NotificationBuilder.jsx","App.js","serviceWorker.js","index.js"],"names":["NotificationBuilder","props","handleTitle","e","newTitle","target","value","setState","title","handleBody","newBody","body","handleBarcode","newBarcode","barcode","barcodeImage","barcodeToBase64Image","canvas","document","createElement","JsBarcode","format","toDataURL","setImageFilePickerRef","el","imageFilePicker","getDataURL","input","files","reader","FileReader","onload","result","readAsDataURL","triggerNotification","console","log","navigator","serviceWorker","ready","then","registration","showNotification","state","image","Notification","requestPermission","className","id","src","this","alt","type","onChange","placeholder","ref","onClick","React","Component","App","isLocalhost","Boolean","window","location","hostname","match","registerValidSW","swUrl","config","register","onupdatefound","installingWorker","installing","onstatechange","controller","onUpdate","onSuccess","catch","error","ReactDOM","render","StrictMode","getElementById","URL","process","href","origin","addEventListener","fetch","headers","response","contentType","get","status","indexOf","unregister","reload","checkValidServiceWorker"],"mappings":"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","file":"static/js/main.83d7c24d.chunk.js","sourcesContent":["import React from \"react\";\r\nimport JsBarcode from 'jsbarcode';\r\n\r\nexport class NotificationBuilder extends React.Component {\r\n    constructor(props) {\r\n        super(props);\r\n\r\n        // ES6 class properties\r\n        this.imageFilePicker = null;\r\n\r\n        this.state = {\r\n            title: \"\",\r\n            body: \"\",\r\n            barcode: \"\",\r\n            barcodeImage: null,\r\n        };\r\n    }\r\n\r\n    componentDidMount() {\r\n        Notification.requestPermission();\r\n    }\r\n\r\n    handleTitle = (e) => {\r\n        const newTitle = e.target.value;\r\n        this.setState({\r\n            title: newTitle\r\n        });\r\n    }\r\n\r\n    handleBody = (e) => {\r\n        const newBody = e.target.value;\r\n        this.setState({\r\n            body: newBody\r\n        });\r\n    }\r\n\r\n    handleBarcode = (e) => {\r\n        const newBarcode = e.target.value;\r\n        this.setState({\r\n            barcode: newBarcode,\r\n            barcodeImage: this.barcodeToBase64Image(newBarcode)\r\n        });\r\n    }\r\n\r\n    barcodeToBase64Image = (barcode) => {\r\n        let canvas = document.createElement(\"canvas\");\r\n        JsBarcode(canvas, barcode, {format: \"CODE39\"});\r\n        return canvas.toDataURL(\"image/png\");\r\n    }\r\n\r\n    setImageFilePickerRef = (el) => {\r\n        this.imageFilePicker = el;\r\n    }\r\n\r\n    getDataURL = () => {\r\n        const input = this.imageFilePicker;\r\n\r\n        if (input.files && input.files[0]) {\r\n            let reader = new FileReader();\r\n\r\n            reader.onload = (e) => {\r\n                this.setState({\r\n                    barcodeImage: e.target.result\r\n                });\r\n            }\r\n\r\n            reader.readAsDataURL(input.files[0]);\r\n        }\r\n    }\r\n\r\n    triggerNotification = () => {\r\n        console.log(\"Test\");\r\n        navigator.serviceWorker.ready.then((registration) => {\r\n            registration.showNotification(\r\n                this.state.title,\r\n                {\r\n                    body: this.state.body,\r\n                    image: this.state.barcodeImage,\r\n                }\r\n            )\r\n        });\r\n    }\r\n\r\n    render() {\r\n        return (\r\n            <div className=\"notification-builder\">\r\n                <img id=\"barcode-image\" src={this.state.barcodeImage} alt=\"\" />\r\n\r\n                <input type=\"text\" onChange={this.handleTitle} placeholder=\"Notification title\"/>\r\n                <input type=\"text\" onChange={this.handleBody} placeholder=\"Notification body\"/>\r\n\r\n                <input type=\"text\" onChange={this.handleBarcode} placeholder=\"CODE128 barcode\" />\r\n\r\n                <input type=\"file\" ref={this.setImageFilePickerRef} onChange={this.getDataURL} />\r\n\r\n                <input type=\"button\" onClick={this.triggerNotification} value=\"Show notification\" />\r\n            </div>\r\n        );\r\n    }\r\n}","import React from 'react';\nimport './App.css';\nimport { NotificationBuilder } from \"./NotificationBuilder\";\n\nfunction App() {\n  return (\n    <div className=\"App\">\n      <NotificationBuilder />\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.register();\n"],"sourceRoot":""}